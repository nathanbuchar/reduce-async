{"version":3,"sources":["reduce-async.js"],"names":["module","exports","reduceAsync","arr","iteratee","done","Array","isArray","TypeError","array","_args","arguments","_arr","Object","_len","length","_index","_value","_iterator","n","_next","_updateValue","fn","val"],"mappings":"AAAA;;;;AAEAA,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,QAA1B,EAAoCC,IAApC,CAAyC,kBAAzC,EAA6D;;AAE5E;;;;;AAKA,MAAI,CAACC,MAAMC,OAAN,CAAcJ,GAAd,CAAL,EAAyB;AACvB,UAAM,IAAIK,SAAJ,CACJ,2DAA0DC,KAA1D,yCAA0DA,KAA1D,KAAkE,IAD9D,CAAN;AAED;;AAED;;;;;AAKA,MAAI,OAAOL,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAII,SAAJ,CACJ,iDAAgDJ,QAAhD,yCAAgDA,QAAhD,KAA2D,GADvD,CAAN;AAED;;AAED;;;;;AAKA,MAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAIG,SAAJ,CACJ,6CAA4CH,IAA5C,yCAA4CA,IAA5C,KAAmD,GAD/C,CAAN;AAED;;AAED;;;;;;AAMA,MAAIK,QAAQC,SAAZ;;AAEA;;;;;;AAMA,MAAIC,OAAOC,OAAOV,GAAP,CAAX;;AAEA;;;;;;;AAOA,MAAIW,OAAOF,KAAKG,MAAL,KAAgB,CAA3B;;AAEA;;;;;;;AAOA,MAAIC,SAAS,CAAb;;AAEA;;;;;;AAMA,MAAIC,SAAU,YAAY;AACxB,QAAIP,MAAMK,MAAN,GAAe,CAAnB,EAAsB;AACpB,aAAOL,MAAM,CAAN,CAAP;AACD,KAFD,MAEO;AACL,aAAOM,SAASF,IAAT,IAAiB,EAAEE,UAAUJ,IAAZ,CAAxB,EAA2C;AACzCI;AACD;;AAED,UAAIA,UAAUF,IAAd,EAAoB;AAClB,cAAM,IAAIN,SAAJ,CACJ,mDADI,CAAN;AAED;;AAED,aAAOI,KAAKI,QAAL,CAAP;AACD;AACF,GAfa,EAAd;;AAiBA;;;;;;;AAOA,WAASE,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,QAAIA,KAAKP,IAAT,EAAe;AACbR,eAASa,MAAT,EAAiBL,KAAKO,CAAL,CAAjB,EAA0BA,CAA1B,EAA6BP,IAA7B,EAAmCQ,MAAMD,CAAN,CAAnC;AACD,KAFD,MAEO;AACLd,WAAKY,MAAL;AACD;AACF;;AAED;;;;;;;;;AASA,WAASG,KAAT,CAAeD,CAAf,EAAkB;AAChB,WAAOE,aAAa,YAAM;AACxBH,gBAAU,EAAEC,CAAZ;AACD,KAFM,CAAP;AAGD;;AAED;;;;;;;;AAQA,WAASE,YAAT,CAAsBC,EAAtB,EAA0B;AACxB,WAAO,eAAO;AACZL,eAASM,GAAT;AACAD;AACD,KAHD;AAID;;AAEDJ,YAAUF,MAAV;AACD,CAvID","file":"reduce-async.js","sourcesContent":["'use strict';\n\nmodule.exports = function reduceAsync(arr, iteratee, done /*, initialValue*/) {\n\n  /**\n   * Validate that the first parameter is an array.\n   *\n   * @throws\n   */\n  if (!Array.isArray(arr)) {\n    throw new TypeError(\n      'Async reduce must be called on an array. Got \"' + typeof array + '\".');\n  }\n\n  /**\n   * Validate that the second parameter is a function.\n   *\n   * @throws\n   */\n  if (typeof iteratee !== 'function') {\n    throw new TypeError(\n      '\"iteratee\" must be a function. Got \"' + typeof iteratee + '\"');\n  }\n\n  /**\n   * Validate that the third parameter is a function.\n   *\n   * @throws\n   */\n  if (typeof done !== 'function') {\n    throw new TypeError(\n      '\"done\" must be a function. Got \"' + typeof done + '\"');\n  }\n\n  /**\n   * The reduceAsync arguments.\n   *\n   * @type {Array}\n   * @private\n   */\n  let _args = arguments;\n\n  /**\n   * The array to reduce.\n   *\n   * @type {Array}\n   * @private\n   */\n  let _arr = Object(arr);\n\n  /**\n   * The zero-fill right shifted length of the array. Ensures that the length\n   * of large arrays is always positive.\n   *\n   * @type {number}\n   * @private\n   */\n  let _len = _arr.length >>> 0;\n\n  /**\n   * The starting index.\n   *\n   * @type {number}\n   * @default 0\n   * @private\n   */\n  let _index = 0;\n\n  /**\n   * The current value of the reduction.\n   *\n   * @type {any}\n   * @private\n   */\n  let _value = (function () {\n    if (_args.length > 3) {\n      return _args[3];\n    } else {\n      while (_index < _len && !(_index in _arr)) {\n        _index++;\n      }\n\n      if (_index >= _len) {\n        throw new TypeError(\n          'Async reduce of empty array with no initial value');\n      }\n\n      return _arr[_index++];\n    }\n  }());\n\n  /**\n   * The reduction iterator function. Called by the \"_next\" function to make\n   * recusively iterative calls asynchronously.\n   *\n   * @param {number} n\n   * @private\n   */\n  function _iterator(n) {\n    if (n in _arr) {\n      iteratee(_value, _arr[n], n, _arr, _next(n));\n    } else {\n      done(_value);\n    }\n  }\n\n  /**\n   * The reduction \"next\" handler. Updates the value of the reduction and makes\n   * another call to the iterator if the reduction is still in progress, or\n   * calls the \"done\" callback if the reduction has finished.\n   *\n   * @param {number} n\n   * @returns {Function}\n   * @private\n   */\n  function _next(n) {\n    return _updateValue(() => {\n      _iterator(++n);\n    });\n  }\n\n  /**\n   * Updates the current reduction value with that passed into the `next`\n   * callback.\n   *\n   * @param {Function} fn\n   * @returns {Function}\n   * @private\n   */\n  function _updateValue(fn) {\n    return val => {\n      _value = val;\n      fn();\n    };\n  }\n\n  _iterator(_index);\n};\n"],"sourceRoot":"/source/"}